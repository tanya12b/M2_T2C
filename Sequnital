#include <iostream>
#include <vector>
#include <chrono>
#include <cstdlib>
using namespace std;
using namespace std::chrono;
int partition(vector<int> &arr, int low, int high) {
    int mid = low + (high - low) / 2; 
    swap(arr[mid], arr[high]);
    int pivot = arr[high]; 
    int i = low - 1;
    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return (i + 1);
}
void quickSort(vector<int> &arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}
int main() {
    int n = 10000; // Size of the array
    vector<int> arr(n); 
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % n;
    }
    auto start = high_resolution_clock::now(); // Start the timer
    quickSort(arr, 0, n - 1); // Perform QuickSort
    auto stop = high_resolution_clock::now(); // Stop the timer
    auto duration = duration_cast<microseconds>(stop - start); 
    cout << "Sequential Execution Time: " << duration.count() << " microseconds" << endl;
    return 0;
}
